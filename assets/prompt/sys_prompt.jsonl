{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nAll values must be normalized as strings with explicit conversions: trim whitespace, collapse repeated spaces, remove units/phrases (e.g., ' 45 degrees ' → '45'), normalize full-width digits to ASCII, and standardize units (e.g., '도'/'degrees' → angle int, '분'/'minutes' → minutes int).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}\nAmbiguous inputs must resolve to explicit defaults: if speed unclear → 'mid', if direction unclear → 'front', if timer unclear → omit; if any parameter cannot be determined safely, omit that parameter.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAll values must be normalized as strings with explicit conversions: trim whitespace, collapse repeated spaces, remove units/phrases (e.g., ' 45 degrees ' → '45'), normalize full-width digits to ASCII, and standardize units (e.g., '도'/'degrees' → angle int, '분'/'minutes' → minutes int).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAmbiguous inputs must resolve to explicit defaults: if speed unclear → 'mid', if direction unclear → 'front', if timer unclear → omit; if any parameter cannot be determined safely, omit that parameter.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAll values must be normalized as strings with explicit conversions: trim whitespace, collapse repeated spaces, remove units/phrases (e.g., ' 45 degrees ' → '45'), normalize full-width digits to ASCII, and standardize units (e.g., '도'/'degrees' → angle int, '분'/'minutes' → minutes int).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAmbiguous inputs must resolve to explicit defaults: if speed unclear → 'mid', if direction unclear → 'front', if timer unclear → omit; if any parameter cannot be determined safely, omit that parameter.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nAll values must be normalized as strings with explicit conversions: trim whitespace, collapse repeated spaces, remove units/phrases (e.g., ' 45 degrees ' → '45'), normalize full-width digits to ASCII, and standardize units (e.g., '도'/'degrees' → angle int, '분'/'minutes' → minutes int).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "Resolve ambiguities and normalize inputs with explicit rules: speed delta phrases {\"조금 더 빠르게\",\"좀 더 세게\",\"a little faster\"} → +1 level, {\"조금 느리게\",\"좀 약하게\",\"a little slower\"} → −1 level (clamp within [low..max]/[1..5]); map speed synonyms case-/lang-insensitively {\"조용히\",\"약\",\"low\",\"1\"}→low, {\"보통\",\"중\",\"mid\",\"2\",\"3\"}→mid, {\"빠르게\",\"강\",\"high\",\"4\"}→high, {\"최대\",\"최대로\",\"max\",\"5\"}→max; if numeric 1–5 is given, set nearest enum; normalize units/whitespace (e.g., \"45도\"/\"45 °\" → angle=45, collapse repeated spaces).\nAmbiguous inputs must resolve to explicit defaults: if speed unclear → 'mid', if direction unclear → 'front', if timer unclear → omit; if any parameter cannot be determined safely, omit that parameter.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAll values must be normalized as strings with explicit conversions: trim whitespace, collapse repeated spaces, remove units/phrases (e.g., ' 45 degrees ' → '45'), normalize full-width digits to ASCII, and standardize units (e.g., '도'/'degrees' → angle int, '분'/'minutes' → minutes int).\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAmbiguous inputs must resolve to explicit defaults: if speed unclear → 'mid', if direction unclear → 'front', if timer unclear → omit; if any parameter cannot be determined safely, omit that parameter.\nFORMAT={\"name\":\"...\",\"arguments\":{\"key_name\":\"...\"}}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { name: string, arguments: { ... } }\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"name\":\"power_on\",\"arguments\":{}}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"name\":\"power_off\",\"arguments\":{}}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"name\":\"set_speed\",\"arguments\":{'level': '...'}}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"name\":\"set_direction\",\"arguments\":{'direction': '...'}}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"name\":\"rotate\",\"arguments\":{'angle_deg': '...'}}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"name\":\"set_timer\",\"arguments\":{'minutes': '...'}}"}
