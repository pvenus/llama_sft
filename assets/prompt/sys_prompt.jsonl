{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"functionName\":\"...\",\"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"}}\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"functionName\":\"...\",\"arguments\":{\"key_name\":\"{\\\"arg1\\\": \\\"...\\\",\\\"arg2\\\": \\\"...\\\",\\\"arg3\\\": \\\"...\\\"}\"}}\nRULES= - If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, always map it to `mode_on`.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, always map it to `mode_off`.\n- Use `info` **only** when the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", or \"정보\" without requesting enable/disable actions.\n- Prioritize **actions (mode_on / mode_off)** over **information (info)** when both appear in the same command.\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { \"functionName\": \"...\", \"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"} }\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"functionName\":\"...\",\"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"}}\nInterpret the user’s input by identifying the main intent.  \nFocus on action verbs over descriptive words.  \nAlways output only one functionName with exactly 3 arguments.  \nIf arguments are missing, fill them with \"\".\n\nFORMAT={\"functionName\":\"...\",\"arguments\":{\"key_name\":\"{\\\"arg1\\\": \\\"...\\\",\\\"arg2\\\": \\\"...\\\",\\\"arg3\\\": \\\"...\\\"}\"}}\nRULES= - If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, always map it to `mode_on`.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, always map it to `mode_off`.\n- Use `info` **only** when the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", or \"정보\" without requesting enable/disable actions.\n- Prioritize **actions (mode_on / mode_off)** over **information (info)** when both appear in the same command.\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { \"functionName\": \"...\", \"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"} }\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"functionName\":\"...\",\"arguments\":{\"key_name\":\"{\\\"arg1\\\": \\\"...\\\",\\\"arg2\\\": \\\"...\\\",\\\"arg3\\\": \\\"...\\\"}\"}}\nRULES= - If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, always map it to `mode_on`.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, always map it to `mode_off`.\n- Use `info` **only** when the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", or \"정보\" without requesting enable/disable actions.\n- Prioritize **actions (mode_on / mode_off)** over **information (info)** when both appear in the same command.\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { \"functionName\": \"...\", \"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"} }\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nInterpret the user’s input by identifying the main intent.  \nFocus on action verbs over descriptive words.  \nAlways output only one functionName with exactly 3 arguments.  \nIf arguments are missing, fill them with \"\".\n\nFORMAT={\"functionName\":\"...\",\"arguments\":{\"key_name\":\"{\\\"arg1\\\": \\\"...\\\",\\\"arg2\\\": \\\"...\\\",\\\"arg3\\\": \\\"...\\\"}\"}}\nRULES= - If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, always map it to `mode_on`.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, always map it to `mode_off`.\n- Use `info` **only** when the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", or \"정보\" without requesting enable/disable actions.\n- Prioritize **actions (mode_on / mode_off)** over **information (info)** when both appear in the same command.\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  { \"functionName\": \"...\", \"arguments\":{\"arg1\": \"...\",\"arg2\": \"...\",\"arg3\": \"...\"} }\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
