{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object [{\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}} ]\n- Interpret the user's command by identifying the **main intent** (functionName).\n- Focus on **verbs and intent words** rather than topic keywords.\n- If multiple intents appear, return multiple functionName calls in order of appearance.\n- Never guess new functionNames. Only use the defined set: mode_on, mode_off, info, swap_env, set_env, talk.\n- Always normalize synonyms (예: \"켜봐\", \"시작해\", \"enable\" → mode_on).\n- Distinguish between **action requests** (control the device) and **information requests** (status/details).\n- If ambiguous, prefer the functionName that matches the explicit verb or question form.\n\nFORMAT={ \"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"} }, { \"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"} }\nRULES=\n- If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, add a `mode_on` functionName.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, add a `mode_off` functionName.\n- If the user asks a question about status or operation (예: \"작동 중이야?\", \"되나요?\", \"작동해?\", \"중이야?\", \"있나요?\"), add an `info` functionName.\n- Use `info` also if the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", \"정보\".\n- If the user’s command contains both a **mode_on/mode_off** request and an **info** request in the same sentence, output **two functionName calls separately** in an array, in the order they appear.\n- For environment toggling words like \"바꿔\", \"전환\", \"스위치\", \"toggle/switch\" → use `swap_env`.\n- For explicit environment setting words like \"설정\", \"변경\", \"세팅\", \"set/change/configure\" → use `set_env`.\n- If the user’s input is small talk, general conversation, or doesn’t map to a control function → use `talk`.\n- Each function call must always include exactly 3 arguments (fill missing with \"\").\n- Always return only JSON. No extra text.\n\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n [{\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}} ]\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object [{\"functionName\":\"...\", \"arguments\":{\"arg1\":\"...\",\"arg2\":\"...\",\"arg3\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"arg1\":\"...\",\"arg2\":\"...\",\"arg3\":\"...\"}} ]\n- Interpret the user's command by identifying the **main intent** (functionName).\n- Focus on **verbs and intent words** rather than topic keywords.\n- If multiple intents appear, return multiple functionName calls in order of appearance.\n- Never guess new functionNames. Only use the defined set: mode_on, mode_off, info, swap_env, set_env, talk.\n- Always normalize synonyms (예: \"켜봐\", \"시작해\", \"enable\" → mode_on).\n- Distinguish between **action requests** (control the device) and **information requests** (status/details).\n- If ambiguous, prefer the functionName that matches the explicit verb or question form.\n\nFORMAT={ \"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"} }, { \"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"} }\nRULES=\n- If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, add a `mode_on` functionName.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, add a `mode_off` functionName.\n- If the user asks a question about status or operation (예: \"작동 중이야?\", \"되나요?\", \"작동해?\", \"중이야?\", \"있나요?\"), add an `info` functionName.\n- Use `info` also if the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", \"정보\".\n- If the user’s command contains both a **mode_on/mode_off** request and an **info** request in the same sentence, output **two functionName calls separately** in an array, in the order they appear.\n- For environment toggling words like \"바꿔\", \"전환\", \"스위치\", \"toggle/switch\" → use `swap_env`.\n- For explicit environment setting words like \"설정\", \"변경\", \"세팅\", \"set/change/configure\" → use `set_env`.\n- If the user’s input is small talk, general conversation, or doesn’t map to a control function → use `talk`.\n- Each function call must always include exactly 3 arguments (fill missing with \"\").\n- Always return only JSON. No extra text.\n\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n [{\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}} ]\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Turn a specific **mode** ON (start/enable).\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Turn a specific mode OFF or pause/resume it.\n  arguments (object):\n    - mode:  AI_Mode/에이아이모드/Outdoor_Air_Quality_AI_Mode/Room_Air_Quality_AI_Mode/Night_Mode/Fixed_Mode/Follow_Mode\n    - pause:  True/False\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\", \"pause\": \"...\"}}\n- info: Retrieve information about status, features, settings, battery, or air quality. Optionally provide a sub-detail topic.\n  arguments (object):\n    - data:  Status/Information/Precautions/Features/Settings/Battery/Air_Quality/Weather/Machine_Cleaning/Personal_Info\n    - detail:\n  example: {\"name\": \"info\", \"arguments\": {\"data\": \"...\", \"detail\": \"...\"}}\n- swap_env: Query current environment settings (theme, temperature unit, voice) or toggle between available options.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Voice/Brightness/Volume\n  example: {\"name\": \"swap_env\", \"arguments\": {\"key\": \"...\"}}\n- set_env: Explicitly set environment parameters such as theme, temperature unit, direction, or voice.\n  arguments (object):\n    - key:  Theme/Temperature_Unit/Direction/Voice/Fan_Speed/Volume/Brightness/Sensor_Sensitivity\n    - value:\n  example: {\"name\": \"set_env\", \"arguments\": {\"key\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form natural language message response (small talk or informational text) without controlling the device.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
