{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object [{\"functionName\":\"...\", \"arguments\":{\"arg1\":\"...\",\"arg2\":\"...\",\"arg3\":\"...\"}}]\n- Interpret the user's command by identifying the **main intent** (functionName).\n- Focus on **verbs and intent words** rather than topic keywords.\n- If multiple intents appear, return multiple functionName calls in order of appearance.\n- Never guess new functionNames. Only use the defined set: mode_on, mode_off, mode_pause, info_caution, info_cleaning, info_air_purifier_device, info_device_function, status_device, info_weather, info_air_quality, info_organic_compound, automatic_env, manual_env, talk.\n- Always normalize synonyms (예: \"켜봐\", \"시작해\", \"enable\" → mode_on).\n- Distinguish between **action requests** (control the device) and **information requests** (status/details).\n- If ambiguous, prefer the functionName that matches the explicit verb or question form.\n\nFORMAT={\"functionName\":\"...\", \"arguments\":{\"arg1\":\"...\",\"arg2\":\"...\",\"arg3\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"arg1\":\"...\",\"arg2\":\"...\",\"arg3\":\"...\"}}\nRULES=\n- If the user requests to **enable / turn on / 켜 / 켜다 / 켜주세요 / 시작 / 실행**, add a `mode_on` functionName.\n- If the user requests to **disable / turn off / 끄다 / 종료 / 중지 / 일시정지 / pause**, add a `mode_off, mode_pause` functionName.\n- If the user asks a question about status or operation (예: \"작동 중이야?\", \"되나요?\", \"작동해?\", \"중이야?\", \"있나요?\"), add an `info` functionName.\n- Use `info_caution, info_cleaning, info_device_function, status_device, info_weather, info_organic_compound` also if the user explicitly asks to \"show\", \"tell me\", \"알려줘\", \"보여줘\", \"확인해줘\", \"정보\".\n- If the user’s command contains both a **mode_on/mode_off** request and an **info** request in the same sentence, output **two functionName calls separately** in an array, in the order they appear.\n- For environment toggling words like \"바꿔\", \"전환\", \"스위치\", \"toggle/switch\" → use `automatic_env`.\n- For explicit environment setting words like \"설정\", \"변경\", \"세팅\", \"set/change/configure\" → use `manual_env`.\n- If the user’s input is small talk, general conversation, or doesn’t map to a control function → use `talk`.\n- Each function call must always include exactly 3 arguments (fill missing with \"\").\n- Always return only JSON. No extra text.\n\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n [{\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}}, {\"functionName\":\"...\", \"arguments\":{\"key_name\":\"...\"}} ]\n The arguments object must always contain exactly 3 fields.\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- mode_on: Enable a specific device mode.\n  arguments (object):\n    - mode:  ai_mode/air_quality_led_mode/all_area_mode/area_air_ai_mode/both_air_ai_mode/charging_mode/fixed_mode/follow_mode/manner_mode/move_mode/mute_mode/night_mode/outdoor_air_ai_mode/privacy_mode/return_mode/scanning_mode/target_area_mode/uv_led_mode/vital_sign_mode/voice_recognition_mode\n  example: {\"name\": \"mode_on\", \"arguments\": {\"mode\": \"...\"}}\n- mode_off: Disable or pause a specific device mode.\n  arguments (object):\n    - mode:  ai_mode/air_quality_led_mode/all_area_mode/area_air_ai_mode/both_air_ai_mode/charging_mode/fixed_mode/follow_mode/manner_mode/move_mode/mute_mode/night_mode/outdoor_air_ai_mode/privacy_mode/return_mode/scanning_mode/target_area_mode/uv_led_mode/vital_sign_mode/voice_recognition_mode\n  example: {\"name\": \"mode_off\", \"arguments\": {\"mode\": \"...\"}}\n- mode_pause: Retrieve device status or information.\n  arguments (object):\n    - type:  move_mode\n  example: {\"name\": \"mode_pause\", \"arguments\": {\"type\": \"...\"}}\n- info_caution: Retrieve caution information.\n  arguments (object):\n    - type:  charging/kids/setup/use\n  example: {\"name\": \"info_caution\", \"arguments\": {\"type\": \"...\"}}\n- info_cleaning: Retrieve caution information.\n  arguments (object):\n    - type:  a1_filter_management/filter_replacement/lidar_sensor/obstacle_sensor/power/product_exterior/sensor_window\n  example: {\"name\": \"info_cleaning\", \"arguments\": {\"type\": \"...\"}}\n- info_air_purifier_device: Retrieve device information.\n  arguments (object):\n    - type:  amount/batch/filter/noise/setting/structure\n  example: {\"name\": \"info_air_purifier_device\", \"arguments\": {\"type\": \"...\"}}\n- info_device_function: Retrieve device function information.\n  arguments (object):\n    - type:  ai_mode/air_cleaning/air_purifier/front_led/language/manner_mode/night_mode/preview/privacy_mode/relax_mode/sensor_sensitivity/temperature_unit/tree_voice/uv_led/vital_sign_mode/wakeup_mode/welcome/security_auth/security_personal_information\n  example: {\"name\": \"info_device_function\", \"arguments\": {\"type\": \"...\"}}\n- status_device: Retrieve device current setting value or status.\n  arguments (object):\n    - type:  ai_mode/airflow/battery/brightness/charging_time/date/electric_coast/electric_energy_consumption/error_code/error_history/filter/is_run_air_purifier/manner_mode/mute_mode/night_mode/privacy/scanning_mode/sensor_sensitivity/temperature/theme/time/uv_led_mode/voice/voice_recognition/volume/wifi/air_quality_led/status\n  example: {\"name\": \"status_device\", \"arguments\": {\"type\": \"...\"}}\n- info_weather: Retrieve weather information.\n  arguments (object):\n    - type:  friday/monday/saturday/sunday/thursday/today/tomorrow/tuesday/wednesday/weekend\n    - region_name:\n  example: {\"name\": \"info_weather\", \"arguments\": {\"type\": \"...\", \"region_name\": \"...\"}}\n- info_air_quality: Retrieve weather information.\n  arguments (object):\n    - type:  friday/monday/saturday/sunday/thursday/today/tomorrow/tuesday/wednesday/weekend\n    - region_name:\n  example: {\"name\": \"info_air_quality\", \"arguments\": {\"type\": \"...\", \"region_name\": \"...\"}}\n- info_organic_compound: Retrieve air quality information for organic compound.\n  arguments (object):\n    - type:  co2/fine_dust/formaldehyde/nox/ultrafine_dust/voc\n  example: {\"name\": \"info_organic_compound\", \"arguments\": {\"type\": \"...\"}}\n- automatic_env: Auto-toggle environment settings.\n  arguments (object):\n    - type:  airflow/brightness/language/sensor_sensitivity/temperature_unit/theme/voice/volume\n  example: {\"name\": \"automatic_env\", \"arguments\": {\"type\": \"...\"}}\n- manual_env: Manually set environment settings.\n  arguments (object):\n    - type:  airflow/brightness/direction/language/sensor_sensitivity/temperature_unit/theme/voice/volume\n    - value:\n  example: {\"name\": \"manual_env\", \"arguments\": {\"type\": \"...\", \"value\": \"...\"}}\n- talk: Send a free-form text reply.\n  arguments (object):\n    - request:\n  example: {\"name\": \"talk\", \"arguments\": {\"request\": \"...\"}}"}
