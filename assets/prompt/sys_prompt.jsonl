{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"string\",\"args\":[\"string\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Interpret the user's command and output a JSON function call using this schema: a single object {\"name\":\"...\",\"arguments\":{...}}; when multiple actions are required, use a wrapper {\"calls\":[{...},{...}] }.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Map the intent to air purifier capabilities: power on/off, set speed (low/mid/high/max or 1–5), set direction (left/right/front/back), rotate by angle (0–360), and set timer (1–600 minutes).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Keep all argument values within the allowed ranges and enums; use safe defaults when unspecified (e.g., speed=mid, direction=front).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "Resolve ambiguities (e.g., \"a little faster\" → increase one level) and normalize units and whitespace (e.g., \"45도\" → 45).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "When multiple actions are implied, return them in execution order (e.g., power_on before set_speed).\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "If the request is unrelated to the air purifier or cannot be mapped safely, return an empty call list: {\"calls\":[]}.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe output must be a single JSON object containing only the keys name and arguments.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe arguments key must be an array of strings. If there are no parameters, use an empty array [].\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDisallowed keys include: action, call, tool, tool_name, args, parameters, function_call, tool_calls.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nDo not include any text, explanations, code fences, or comments outside the JSON (e.g., no ```).\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAll values must be normalized as strings: trim whitespace, remove units or unnecessary phrases (e.g., ' 45 degrees ' → '45').\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nNumerical ranges and enumerations must follow the function.yaml specification. If out of range, snap to the nearest valid value.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nAmbiguous inputs should be interpreted as default or safest values according to the spec. Omit parameters if uncertain.\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
{"prompt": "The output must be JSON only, with no explanations or code fences.\nThe output JSON must be compact, minimizing spaces, line breaks, and indentation\nFORMAT={\"name\":\"\",\"args\":[\"\"]}\nReturn only the FORMAT as valid JSON. No extra text.\n\nOutput JSON format (fixed):\n  calls: [\n    { name: string, arguments: { ... } }\n  ]\n  # Return JSON only. No extra text.\n\nAvailable functions:\n- power_on: Turn on the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_on\",\"arguments\":{}}]}\n- power_off: Turn off the air purifier\n  (no parameters)\n  example: {\"calls\":[{\"name\":\"power_off\",\"arguments\":{}}]}\n- set_speed: Set the fan speed level\n  arguments (object):\n    - level: type=string (enum=['low', 'mid', 'high', 'max', '1', '2', '3', '4', '5'])\n  example: {\"calls\":[{\"name\":\"set_speed\",\"arguments\":{\"level\":\"string\"}}]}\n- set_direction: Set wind direction\n  arguments (object):\n    - direction: type=string (enum=['left', 'right', 'front', 'back'])\n  example: {\"calls\":[{\"name\":\"set_direction\",\"arguments\":{\"direction\":\"string\"}}]}\n- rotate: Rotate to a certain angle in degrees\n  arguments (object):\n    - angle_deg: type=integer (minimum=0, maximum=360)\n  example: {\"calls\":[{\"name\":\"rotate\",\"arguments\":{\"angle_deg\":\"string\"}}]}\n- set_timer: Set auto power-off timer in minutes\n  arguments (object):\n    - minutes: type=integer (minimum=1, maximum=600)\n  example: {\"calls\":[{\"name\":\"set_timer\",\"arguments\":{\"minutes\":\"string\"}}]}"}
