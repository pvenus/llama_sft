function_map:
  function_BP:
    - when: { enable: 1, type: -1 }
      new_name: mode_off
      args: { mode: ai_mode }

    - when: { enable: 1, type: 0 }
      new_name: mode_off
      args: { mode: outdoor_air_ai_mode }

    - when: { enable: 1, type: 1 }
      new_name: mode_off
      args: { mode: area_air_ai_mode }

    - when: { enable: 1, type: 2 }
      new_name: mode_off
      args: { mode: both_air_ai_mode }

    - when: { enable: 0, type: -1 }
      new_name: mode_on
      args: { mode: ai_mode }

    - when: { enable: 0, type: 0 }
      new_name: mode_on
      args: { mode: outdoor_air_ai_mode }

    - when: { enable: 0, type: 1 }
      new_name: mode_on
      args: { mode: area_air_ai_mode }

    - when: { enable: 0, type: 2 }
      new_name: mode_on
      args: { mode: both_air_ai_mode }

    - when: { get: true }
      new_name: status_device
      args: { type: ai_mode }

  function_BS:
    - when: { enable: true }
      new_name: mode_on
      args: { mode: night_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: night_mode }

  function_PG:
    - when: {}
      new_name: mode_on
      args: { mode: fixed_mode }

  function_CK:
    - when: {}
      new_name: mode_off
      args: { mode: follow_mode }

  function_EF:
    - when: { action: 1 }
      new_name: mode_on
      args: { mode: all_area_mode }

  function_FF:
    - when: { position: "-1" }
      new_name: mode_on
      args: { mode: target_area_mode, area_name: none }
    - when: { position: "*" }
      new_name: mode_on
      args: { mode: target_area_mode, area_name: "{position}" }

  function_GV:
    - when: {}
      new_name: mode_on
      args: { mode: vital_sign_mode }

  function_KI:
    - when: {}
      new_name: mode_on
      args: { mode: return_mode }

  function_CE:
    - when: {}
      new_name: status_device
      args: { type: status }

  function_CS:
    - when: { type: 1 }
      new_name: info_air_purifier_device
      args: { type: setting }
    - when: { type: 2 }
      new_name: info_air_purifier_device
      args: { type: amount }
    - when: { type: 3 }
      new_name: info_air_purifier_device
      args: { type: batch }

  function_DW:
    - when: { type: 1 }
      new_name: info_caution
      args: { type: kids }
    - when: { type: 2 }
      new_name: info_caution
      args: { type: charging }
    - when: { type: 3 }
      new_name: info_caution
      args: { type: setup }
    - when: { type: 4 }
      new_name: info_caution
      args: { type: use }

  function_EN:
    - when: { type: 1 }
      new_name: info_device_function
      args: { type: air_purifier }
    - when: { type: 2 }
      new_name: info_device_function
      args: { type: preview }
    - when: { type: 3 }
      new_name: info_device_function
      args: { type: air_cleaning }
    - when: { type: 4 }
      new_name: info_device_function
      args: { type: welcome }
    - when: { type: 5 }
      new_name: info_device_function
      args: { type: wakeup_mode }
    - when: { type: 6 }
      new_name: info_device_function
      args: { type: relax_mode }
    - when: { type: 7 }
      new_name: info_device_function
      args: { type: vital_sign_mode }

  function_GN:
    - when: { get: true }
      new_name: status_device
      args: { type: privacy }
    - when: { enable: true }
      new_name: mode_on
      args: { mode: privacy_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: privacy_mode }

  function_HI:
    - when: { type: 1 }
      new_name: status_device
      args: { type: electric_energy_consumption }
    - when: { type: 2 }
      new_name: status_device
      args: { type: electric_coast }

  function_HS:
    - when: { type: -1 }
      new_name: automatic_env
      args: { type: language }
    - when: { type: 1 }
      new_name: manual_env
      args: { type: language, value: korean }
    - when: { type: 2 }
      new_name: manual_env
      args: { type: language, value: english }

  function_HW:
    - when: { type: 1 }
      new_name: info_organic_compound
      args: { type: fine_dust }
    - when: { type: 2 }
      new_name: info_organic_compound
      args: { type: ultrafine_dust }
    - when: { type: 3 }
      new_name: info_organic_compound
      args: { type: voc }
    - when: { type: 4 }
      new_name: info_organic_compound
      args: { type: nox }
    - when: { type: 5 }
      new_name: info_organic_compound
      args: { type: formaldehyde }
    - when: { type: 6 }
      new_name: info_organic_compound
      args: { type: co2 }

  function_ID:
    - when: { get: true }
      new_name: status_device
      args: { type: is_run_air_purifier }

  function_IH:
    - when: { get: true }
      new_name: status_device
      args: { type: scanning_mode }
    - when: { scan: true }
      new_name: mode_on
      args: { mode: scanning_mode }
    - when: { scan: false }
      new_name: mode_off
      args: { mode: scanning_mode }

  function_JJ:
    - when: {}
      new_name: status_device
      args: { type: battery }

  function_ZV:
    - when: { get: true }
      new_name: status_device
      args: { type: volume }
    - when: { volume: -1 }
      new_name: automatic_env
      args: { type: volume }
    - when: { volume: 0 }
      new_name: manual_env
      args: { type: volume, value: 0 }
    - when: { volume: 1 }
      new_name: manual_env
      args: { type: volume, value: 1 }
    - when: { volume: 2 }
      new_name: manual_env
      args: { type: volume, value: 2 }
    - when: { volume: 3 }
      new_name: manual_env
      args: { type: volume, value: 3 }
    - when: { volume: 4 }
      new_name: manual_env
      args: { type: volume, value: 4 }
    - when: { volume: 5 }
      new_name: manual_env
      args: { type: volume, value: 5 }

  function_WN:
    - when: { get: true }
      new_name: status_device
      args: { type: brightness }
    - when: { brightness: -1 }
      new_name: automatic_env
      args: { type: brightness }
    - when: { brightness: 0 }
      new_name: manual_env
      args: { type: brightness, value: 0 }
    - when: { brightness: 1 }
      new_name: manual_env
      args: { type: brightness, value: 1 }
    - when: { brightness: 2 }
      new_name: manual_env
      args: { type: brightness, value: 2 }
    - when: { brightness: 3 }
      new_name: manual_env
      args: { type: brightness, value: 3 }
    - when: { brightness: 4 }
      new_name: manual_env
      args: { type: brightness, value: 4 }
    - when: { brightness: 5 }
      new_name: manual_env
      args: { type: brightness, value: 5 }

  function_QD:
    - when: { get: true }
      new_name: status_device
      args: { type: sensor_sensitivity }
    - when: { type: -1 }
      new_name: automatic_env
      args: { type: sensor_sensitivity }
    - when: { type: 0 }
      new_name: manual_env
      args: { type: sensor_sensitivity, value: 0 }
    - when: { type: 1 }
      new_name: manual_env
      args: { type: sensor_sensitivity, value: 1 }
    - when: { type: 2 }
      new_name: manual_env
      args: { type: sensor_sensitivity, value: 3 }

  function_SC:
    - when: { enable: true }
      new_name: mode_on
      args: { mode: air_quality_led_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: air_quality_led_mode }
    - when: { get: true }
      new_name: status_device
      args: { type: air_quality_led }

  function_MO:
    - when: { timeframe: 3, location: "*" }
      new_name: info_weather
      args: { type: monday,    region_name: "{location}" }
    - when: { timeframe: 4, location: "*" }
      new_name: info_weather
      args: { type: tuesday,   region_name: "{location}" }
    - when: { timeframe: 5, location: "*" }
      new_name: info_weather
      args: { type: wednesday, region_name: "{location}" }
    - when: { timeframe: 6, location: "*" }
      new_name: info_weather
      args: { type: thursday,  region_name: "{location}" }
    - when: { timeframe: 7, location: "*" }
      new_name: info_weather
      args: { type: friday,    region_name: "{location}" }
    - when: { timeframe: 8, location: "*" }
      new_name: info_weather
      args: { type: saturday,  region_name: "{location}" }
    - when: { timeframe: 9, location: "*" }
      new_name: info_weather
      args: { type: sunday,    region_name: "{location}" }
    - when: { timeframe: 1, location: "*" }
      new_name: info_weather
      args: { type: tomorrow,  region_name: "{location}" }
    - when: { timeframe: 2, location: "*" }
      new_name: info_weather
      args: { type: weekend,   region_name: "{location}" }
    - when: { timeframe: 0, location: "*" }
      new_name: info_weather
      args: { type: today,     region_name: "{location}" }

  function_IO:
    - when: { timeframe: 3, location: "*" }
      new_name: info_air_quality
      args: { type: monday,    region_name: "{location}" }
    - when: { timeframe: 4, location: "*" }
      new_name: info_air_quality
      args: { type: tuesday,   region_name: "{location}" }
    - when: { timeframe: 5, location: "*" }
      new_name: info_air_quality
      args: { type: wednesday, region_name: "{location}" }
    - when: { timeframe: 6, location: "*" }
      new_name: info_air_quality
      args: { type: thursday,  region_name: "{location}" }
    - when: { timeframe: 7, location: "*" }
      new_name: info_air_quality
      args: { type: friday,    region_name: "{location}" }
    - when: { timeframe: 8, location: "*" }
      new_name: info_air_quality
      args: { type: saturday,  region_name: "{location}" }
    - when: { timeframe: 9, location: "*" }
      new_name: info_air_quality
      args: { type: sunday,    region_name: "{location}" }
    - when: { timeframe: 1, location: "*" }
      new_name: info_air_quality
      args: { type: tomorrow,  region_name: "{location}" }
    - when: { timeframe: 2, location: "*" }
      new_name: info_air_quality
      args: { type: weekend,   region_name: "{location}" }
    - when: { timeframe: 0, location: "*" }
      new_name: info_air_quality
      args: { type: today,     region_name: "{location}" }

  function_JS:
    - when: { type: 1 }
      new_name: info_device_function
      args: { type: manner_mode }
    - when: { type: 2 }
      new_name: info_device_function
      args: { type: privacy_mode }
    - when: { type: 3 }
      new_name: info_device_function
      args: { type: night_mode }
    - when: { type: 4 }
      new_name: info_device_function
      args: { type: tree_voice }
    - when: { type: 5 }
      new_name: info_device_function
      args: { type: temperature_unit }
    - when: { type: 6 }
      new_name: info_device_function
      args: { type: uv_led }
    - when: { type: 7 }
      new_name: info_device_function
      args: { type: front_led }
    - when: { type: 8 }
      new_name: info_device_function
      args: { type: language }
    - when: { type: 9 }
      new_name: info_device_function
      args: { type: sensor_sensitivity }
    - when: { type: 10 }
      new_name: info_device_function
      args: { type: ai_mode }

  function_KP:
    - when: { type: 1 }
      new_name: status_device
      args: { type: charging_time }
    - when: { type: 2 }
      new_name: mode_on
      args: { mode: charging_mode }

  function_UY:
    - when: {}
      new_name: status_device
      args: { type: error_code }

  function_MV:
    - when: { mute: true }
      new_name: mode_on
      args: { mode: mute_mode }
    - when: { mute: false }
      new_name: mode_off
      args: { mode: mute_mode }
    - when: { get: true }
      new_name: status_device
      args: { type: mute_mode }

  function_HG:
    - when: { theme: -1 }
      new_name: automatic_env
      args: { type: theme }
    - when: { theme: 2 }
      new_name: manual_env
      args: { type: theme, value: indoor }
    - when: { theme: 0 }
      new_name: manual_env
      args: { type: theme, value: default }
    - when: { get: true }
      new_name: status_device
      args: { type: theme }

  function_EW:
    - when: { get: true }
      new_name: status_device
      args: { type: temperature }
    - when: { type: -1 }
      new_name: automatic_env
      args: { type: temperature_unit }
    - when: { type: 0 }
      new_name: manual_env
      args: { type: temperature, value: celsius }
    - when: { type: 1 }
      new_name: manual_env
      args: { type: temperature, value: fahrenheit }


  function_GQ:
    - when: { get: true }
      new_name: status_device
      args: { type: voice }
    - when: { gender: -1 }
      new_name: automatic_env
      args: { type: voice }
    - when: { gender: 2 }
      new_name: manual_env
      args: { type: voice, value: male }
    - when: { gender: 1 }
      new_name: manual_env
      args: { type: voice, value: female }

  function_FR:
    - when: {}
      new_name: manual_env
      args: { type: direction, value: user }

  function_NN:
    - when: { enable: true }
      new_name: mode_on
      args: { mode: uv_led_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: uv_led_mode }
    - when: { get: true }
      new_name: status_device
      args: { type: uv_led_mode }

  function_PC:
    - when: { type: 1 }
      new_name: info_cleaning
      args: { type: filter_replacement }
    - when: { type: 3 }
      new_name: info_cleaning
      args: { type: a1_filter_management }
    - when: { type: 4 }
      new_name: info_cleaning
      args: { type: sensor_window }
    - when: { type: 5 }
      new_name: info_cleaning
      args: { type: lidar_sensor }
    - when: { type: 6 }
      new_name: info_cleaning
      args: { type: obstacle_sensor }
    - when: { type: 7 }
      new_name: info_cleaning
      args: { type: power }
    - when: { type: 8 }
      new_name: info_cleaning
      args: { type: product_exterior }

  function_NK:
    - when: { speed: 3 }
      new_name: manual_env
      args: { type: airflow, value: 3 }
    - when: { speed: 0 }
      new_name: automatic_env
      args: { type: airflow, value: 0 }
    - when: { speed: 4 }
      new_name: manual_env
      args: { type: airflow, value: 4 }
    - when: { speed: 1 }
      new_name: manual_env
      args: { type: airflow, value: 1  }
    - when: { speed: 2 }
      new_name: manual_env
      args: { type: airflow, value: 2 }
    - when: { get: true }
      new_name: status_device
      args: { type: airflow }
    - when: { speed: -1 }
      new_name: automatic_env
      args: { type: airflow, value: -1 }

  function_QT:
    - when: { get: true }
      new_name: status_device
      args: { type: voice_recognition }
    - when: { enable: true }
      new_name: mode_on
      args: { mode: voice_recognition_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: voice_recognition_mode }

  function_SB:
    - when: { type: 1 }
      new_name: info_device_function
      args: { type: security_auth }
    - when: { type: 2 }
      new_name: info_air_purifier_device
      args: { type: filter }
    - when: { type: 3 }
      new_name: info_air_purifier_device
      args: { type: noise }
    - when: { type: 4 }
      new_name: info_air_purifier_device
      args: { type: structure }
    - when: { type: 5 }
      new_name: info_device_function
      args: { type: security_personal_information }

  function_SV:
    - when: { type: 1 }
      new_name: status_device
      args: { type: time }
    - when: { type: 2 }
      new_name: status_device
      args: { type: manner_mode }
    - when: { type: 3 }
      new_name: status_device
      args: { type: night_mode }
    - when: { type: 4 }
      new_name: status_device
      args: { type: wifi }
    - when: { type: 5 }
      new_name: status_device
      args: { type: date }

  function_UJ:
    - when: {}
      new_name: status_device
      args: { type: filter }

  function_XO:
    - when: {}
      new_name: status_device
      args: { type: error_history }

  function_ZX:
    - when: { enable: true }
      new_name: mode_on
      args: { mode: manner_mode }
    - when: { enable: false }
      new_name: mode_off
      args: { mode: manner_mode }

  function_YA:
    - when: { move: 2 }
      new_name: mode_on
      args: { mode: move_mode }
    - when: { move: 0 }
      new_name: mode_off
      args: { mode: move_mode }
    - when: { move: 1 }
      new_name: mode_pause
      args: { mode: move_mode }

  # MR: 단순 토크 함수로 매핑
  function_MR:
    - when: {}
      new_name: talk
      args: {}